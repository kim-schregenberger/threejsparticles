{"version":3,"file":"animate-CDgwST4w.js","sources":["../../src/shaders/galaxy/vertex.glsl","../../src/shaders/galaxy/fragment.glsl","../../src/animate.js"],"sourcesContent":["uniform float uTime;\nuniform float uSize;\n\nattribute vec3 aRandomness;\nattribute float aScale;\n\nvarying vec3 vColor;\n\nvoid main()\n{\n    /**\n     * Position\n     */\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n                \n    // Rotate\n    float angle = atan(modelPosition.x, modelPosition.z);\n    float distanceToCenter = length(modelPosition.xz);\n    float angleOffset = (1.0 / distanceToCenter) * uTime;\n    angle += angleOffset;\n    modelPosition.x = cos(angle) * distanceToCenter;\n    modelPosition.z = sin(angle) * distanceToCenter;\n\n    // Randomness\n    modelPosition.xyz += aRandomness;\n\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectedPosition = projectionMatrix * viewPosition;\n    gl_Position = projectedPosition;\n\n    /**\n     * Size\n     */\n    gl_PointSize = uSize * aScale;\n    gl_PointSize *= (1.0 / - viewPosition.z);\n\n    /**\n     * Color\n     */\n    vColor = color;\n}","varying vec3 vColor;\n\nvoid main()\n{\n    // // Disc\n    // float strength = distance(gl_PointCoord, vec2(0.5));\n    // strength = step(0.5, strength);\n    // strength = 1.0 - strength;\n\n    // // Diffuse point\n    // float strength = distance(gl_PointCoord, vec2(0.5));\n    // strength *= 2.0;\n    // strength = 1.0 - strength;\n\n    // Light point\n    float strength = distance(gl_PointCoord, vec2(0.5));\n    strength = 1.0 - strength;\n    strength = pow(strength, 10.0);\n\n    // Final color\n    vec3 color = mix(vec3(0.0), vColor, strength);\n    gl_FragColor = vec4(color, 1.0);\n    #include <colorspace_fragment>\n}","import * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport GUI from 'lil-gui'\nimport galaxyVertexShader from './shaders/galaxy/vertex.glsl'\nimport galaxyFragmentShader from './shaders/galaxy/fragment.glsl'\n\n/**\n * Base\n */\n// Debug\nconst gui = new GUI()\n\n// hide GUI\ngui.domElement.style.display = 'none';\n\n// Toggle GUI visibility when pressing 'h'\ndocument.addEventListener('keydown', (event) => {\n    if (event.key === 'h' || event.key === 'H') {\n        const guiContainer = gui.domElement;\n        if (guiContainer.style.display === 'none') {\n            guiContainer.style.display = 'block';\n        } else {\n            guiContainer.style.display = 'none';\n        }\n    }\n});\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n/**\n * Galaxy\n */\nconst parameters = {}\nparameters.count = 200000\nparameters.size = 0.005\nparameters.radius = 9\nparameters.branches = 2\nparameters.spin = 1\nparameters.randomness = 1\nparameters.randomnessPower = 6\nparameters.insideColor = '#2e3133'\nparameters.outsideColor = '#3a0d2a'\n\nlet geometry = null\nlet material = null\nlet points = null\n\nconst generateGalaxy = () =>\n{\n    if(points !== null)\n    {\n        geometry.dispose()\n        material.dispose()\n        scene.remove(points)\n    }\n\n    /**\n     * Geometry\n     */\n    geometry = new THREE.BufferGeometry()\n\n    const positions = new Float32Array(parameters.count * 3)\n    const randomness = new Float32Array(parameters.count * 3)\n    const colors = new Float32Array(parameters.count * 3)\n    const scales = new Float32Array(parameters.count * 1)\n\n    const insideColor = new THREE.Color(parameters.insideColor)\n    const outsideColor = new THREE.Color(parameters.outsideColor)\n\n    for(let i = 0; i < parameters.count; i++)\n    {\n        const i3 = i * 3\n\n        // Position\n        const radius = Math.random() * parameters.radius\n\n        const branchAngle = (i % parameters.branches) / parameters.branches * Math.PI * 2\n\n        const randomX = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : - 1) * parameters.randomness * radius\n        const randomY = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : - 1) * parameters.randomness * radius\n        const randomZ = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : - 1) * parameters.randomness * radius\n\n        positions[i3    ] = Math.cos(branchAngle) * radius\n        positions[i3 + 1] = 0\n        positions[i3 + 2] = Math.sin(branchAngle) * radius\n    \n        randomness[i3    ] = randomX\n        randomness[i3 + 1] = randomY\n        randomness[i3 + 2] = randomZ\n\n        // Color\n        const mixedColor = insideColor.clone()\n        mixedColor.lerp(outsideColor, radius / parameters.radius)\n\n        colors[i3    ] = mixedColor.r\n        colors[i3 + 1] = mixedColor.g\n        colors[i3 + 2] = mixedColor.b\n\n        // Scale\n        scales[i] = Math.random()\n    }\n\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n    geometry.setAttribute('aRandomness', new THREE.BufferAttribute(randomness, 3))\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\n    geometry.setAttribute('aScale', new THREE.BufferAttribute(scales, 1))\n\n    /**\n     * Material\n     */\n    material = new THREE.ShaderMaterial({\n        depthWrite: false,\n        blending: THREE.AdditiveBlending,\n        vertexColors: true,\n        uniforms:\n        {\n            uTime: { value: 0 },\n            uSize: { value: 30 * renderer.getPixelRatio() }\n        },    \n        vertexShader: galaxyVertexShader,\n        fragmentShader: galaxyFragmentShader\n    })\n\n    /**\n     * Points\n     */\n    points = new THREE.Points(geometry, material)\n    scene.add(points)\n}\n\n// gui.add(parameters, 'count').min(100).max(1000000).step(100).onFinishChange(generateGalaxy)\n// gui.add(parameters, 'radius').min(0.01).max(20).step(0.01).onFinishChange(generateGalaxy)\n// gui.add(parameters, 'branches').min(2).max(20).step(1).onFinishChange(generateGalaxy)\n// gui.add(parameters, 'randomness').min(0).max(2).step(0.001).onFinishChange(generateGalaxy)\n// gui.add(parameters, 'randomnessPower').min(1).max(10).step(0.001).onFinishChange(generateGalaxy)\n// gui.addColor(parameters, 'insideColor').onFinishChange(generateGalaxy)\n// gui.addColor(parameters, 'outsideColor').onFinishChange(generateGalaxy)\n\n\n// Add event listeners for the buttons\ndocument.getElementById('increaseBranches').addEventListener('click', () => {\n    parameters.branches = Math.min(parameters.branches + 1, 8)\n    generateGalaxy()\n})\n\ndocument.getElementById('decreaseBranches').addEventListener('click', () => {\n    parameters.branches = Math.max(parameters.branches - 1, 1)\n    generateGalaxy()\n})\n\n// document.getElementById('randomizeColors').addEventListener('click', () => {\n//     parameters.insideColor = `#${Math.floor(Math.random() * 16777215).toString(16)}`\n//     parameters.outsideColor = `#${Math.floor(Math.random() * 16777215).toString(16)}`\n//     generateGalaxy()\n// })\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\ncamera.position.x = 3\ncamera.position.y = 3\ncamera.position.z = 3\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n/**\n * Generate the first galaxy\n */\ngenerateGalaxy()\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime()\n\n    // Update material\n    material.uniforms.uTime.value = elapsedTime * 0.5\n\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["vertex_default","fragment_default","gui","GUI","event","guiContainer","canvas","scene","THREE.Scene","parameters","geometry","material","points","generateGalaxy","THREE.BufferGeometry","positions","randomness","colors","scales","insideColor","THREE.Color","outsideColor","i","i3","radius","branchAngle","randomX","randomY","randomZ","mixedColor","THREE.BufferAttribute","THREE.ShaderMaterial","THREE.AdditiveBlending","renderer","galaxyVertexShader","galaxyFragmentShader","THREE.Points","sizes","camera","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","clock","THREE.Clock","tick","elapsedTime"],"mappings":"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"}