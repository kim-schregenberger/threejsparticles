{"version":3,"file":"main-Bhniv39l.js","sources":["../../src/script.js"],"sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport GUI from 'lil-gui';\nimport gsap from 'gsap';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';\n\nconst gui = new GUI();\n\n// hide GUI\ngui.domElement.style.display = 'none';\n\n// Toggle GUI visibility when pressing 'h'\ndocument.addEventListener('keydown', (event) => {\n    if (event.key === 'h' || event.key === 'H') {\n        const guiContainer = gui.domElement;\n        if (guiContainer.style.display === 'none') {\n            guiContainer.style.display = 'block';\n        } else {\n            guiContainer.style.display = 'none';\n        }\n    }\n});\n\nconst parameters = {\n    materialColor: '#ffeded',\n    sphereSegments: 64,\n    torusKnotSegments: 200,\n    boxSegments: 20,\n    torusSegments: 40\n};\n\n/**\n * Base\n */\nconst canvas = document.querySelector('canvas.webgl');\nconst scene = new THREE.Scene();\n\n/**\n * Textures\n */\nconst textureLoader = new THREE.TextureLoader();\nconst particleTexture = textureLoader.load('/threejsparticles/textures/particles/14.png');\n\n// Geometry\nconst createParticles = (geometry, color, size) => {\n    const particlesMaterial = new THREE.PointsMaterial({\n        size: size,\n        sizeAttenuation: true,\n        color: color,\n        transparent: true,\n        alphaTest: 0.5,\n        depthWrite: true\n    });\n    return new THREE.Points(geometry, particlesMaterial);\n};\n\nlet mesh1, mesh2, mesh3, mesh4;\nconst objectsDistance = 4;\n\nconst createMeshes = () => {\n    if (mesh1) {\n        scene.remove(mesh1);\n        scene.remove(mesh2);\n        scene.remove(mesh3);\n        scene.remove(mesh4);\n    }\n\n    const sphereGeometry = new THREE.SphereGeometry(1, parameters.sphereSegments, parameters.sphereSegments);\n    const torusKnotGeometry = new THREE.TorusKnotGeometry(0.6, 0.3, parameters.torusKnotSegments, 50);\n    const boxGeometry = new THREE.BoxGeometry(1.5, 1.5, 1.5, parameters.boxSegments, parameters.boxSegments, parameters.boxSegments);\n    const torusGeometry = new THREE.TorusGeometry(0.8, 0.4, parameters.torusSegments, 150);\n\n    mesh1 = createParticles(sphereGeometry, parameters.materialColor, 0.02);\n    mesh2 = createParticles(torusKnotGeometry, parameters.materialColor, 0.02);\n    mesh3 = createParticles(boxGeometry, parameters.materialColor, 0.02);\n    mesh4 = createParticles(torusGeometry, parameters.materialColor, 0.02);\n\n    updateMeshPositions();\n    scene.add(mesh1, mesh2, mesh3, mesh4);\n};\n\nconst updateMeshPositions = () => {\n    if (window.innerWidth <= 800) {\n        // Mobile layout: stack meshes vertically\n        mesh1.position.set(0, -objectsDistance * 1, 0);\n        mesh2.position.set(0, -objectsDistance * 2, 0);\n        mesh3.position.set(0, -objectsDistance * 3, 0);\n        mesh4.position.set(0, -objectsDistance * 4, 0);\n    } else {\n        // Default layout: alternate left and right\n        mesh1.position.set(-2, -objectsDistance * 1, 0);\n        mesh2.position.set(2, -objectsDistance * 2, 0);\n        mesh3.position.set(-2, -objectsDistance * 3, 0);\n        mesh4.position.set(2, -objectsDistance * 4, 0);\n    }\n};\n\ncreateMeshes();\n\n// GUI Controls\ngui.addColor(parameters, 'materialColor').onChange(() => {\n    mesh1.material.color.set(parameters.materialColor);\n    mesh2.material.color.set(parameters.materialColor);\n    mesh3.material.color.set(parameters.materialColor);\n    mesh4.material.color.set(parameters.materialColor);\n});\n\n// gui.add(parameters, 'sphereSegments', 4, 80, 1).name('Sphere Segments').onChange(createMeshes);\n// gui.add(parameters, 'torusKnotSegments', 10, 250, 1).name('TorusKnot Segments').onChange(createMeshes);\n// gui.add(parameters, 'boxSegments', 1, 30, 1).name('Box Segments').onChange(createMeshes);\n// gui.add(parameters, 'torusSegments', 3, 50, 1).name('Torus Segments').onChange(createMeshes);\n\n/**\n * Background Particles\n */\nconst particlesCount = 300;\nconst positions = new Float32Array(particlesCount * 3);\n\nfor (let i = 0; i < particlesCount; i++) {\n    positions[i * 3 + 0] = (Math.random() - 0.5) * 10;\n    positions[i * 3 + 1] = objectsDistance * 0.5 - Math.random() * objectsDistance * 5;\n    positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\n}\n\nconst particlesGeometry = new THREE.BufferGeometry();\nparticlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\nconst bgparticlesMaterial = new THREE.PointsMaterial({\n    color: parameters.materialColor,\n    sizeAttenuation: true,\n    size: 0.1,\n    map: particleTexture,\n    transparent: true,\n    alphaTest: 0.5,\n    depthWrite: true\n});\n\nconst particles = new THREE.Points(particlesGeometry, bgparticlesMaterial);\nscene.add(particles);\n\n/**\n * Lights\n */\nconst directionalLight = new THREE.DirectionalLight('#ffffff', 3);\ndirectionalLight.position.set(1, 1, 0);\nscene.add(directionalLight);\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n};\n\nwindow.addEventListener('resize', () => {\n    sizes.width = window.innerWidth;\n    sizes.height = window.innerHeight;\n    camera.aspect = sizes.width / sizes.height;\n    camera.updateProjectionMatrix();\n    renderer.setSize(sizes.width, sizes.height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    updateMeshPositions(); // Update positions on resize\n});\n\n/**\n * Camera\n */\nconst cameraGroup = new THREE.Group();\nscene.add(cameraGroup);\nconst camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100);\ncamera.position.z = 6;\ncameraGroup.add(camera);\n\n/**\n * Controls\n */\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\ncontrols.enableZoom = false;\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n\n\n/**\n * Cursor and Touch\n */\nconst cursor = { x: 0, y: 0 };\nconst touch = { x: 0, y: 0 };\n\nconst handleMove = (x, y) => {\n    cursor.x = x / sizes.width - 0.5;\n    cursor.y = y / sizes.height - 0.5;\n};\n\nwindow.addEventListener('mousemove', (event) => {\n    handleMove(event.clientX, event.clientY);\n});\n\nwindow.addEventListener('touchmove', (event) => {\n    if (event.touches.length > 0) {\n        handleMove(event.touches[0].clientX, event.touches[0].clientY);\n    }\n});\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock();\nlet previousTime = 0;\n\nconst tick = () => {\n    const elapsedTime = clock.getElapsedTime();\n    const deltaTime = elapsedTime - previousTime;\n    previousTime = elapsedTime;\n\n    camera.position.y = -scrollY / sizes.height * objectsDistance;\n\n    const parallaxX = cursor.x * 0.5;\n    const parallaxY = -cursor.y * 0.5;\n    cameraGroup.position.x += (parallaxX - cameraGroup.position.x) * 5 * deltaTime;\n    cameraGroup.position.y += (parallaxY - cameraGroup.position.y) * 5 * deltaTime;\n\n    mesh3.rotation.x += deltaTime * 0.3;\n    mesh3.rotation.y += deltaTime * 0.16;\n\n    // mesh1.rotation.x += deltaTime * -0.16;\n    // mesh1.rotation.y += deltaTime * -0.3;\n\n    gsap.to(mesh2.rotation, {\n        x: cursor.y * Math.PI * 2,\n        y: cursor.x * Math.PI * 2,\n        duration: 1,\n        ease: 'power2.out'\n    });\n\n    renderer.render(scene, camera);\n    window.requestAnimationFrame(tick);\n};\n\ntick();\n\n/**\n * Raycaster\n */\nconst raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();\n\nconst handleClick = (x, y) => {\n    mouse.x = (x / sizes.width) * 2 - 1;\n    mouse.y = -(y / sizes.height) * 2 + 1;\n    raycaster.setFromCamera(mouse, camera);\n\n    const intersects = raycaster.intersectObject(mesh1);\n\n    if (intersects.length > 0) {\n        const selectedParticle = intersects[0];\n        showParticleIndex(selectedParticle.index);\n    }\n};\n\n\nwindow.addEventListener('click', (event) => {\n    handleClick(event.clientX, event.clientY);\n});\n\nwindow.addEventListener('touchend', (event) => {\n    if (event.changedTouches.length > 0) {\n        handleClick(event.changedTouches[0].clientX, event.changedTouches[0].clientY);\n    }\n});\n\nfunction showParticleIndex(index) {\n    const positionElement = document.getElementById('particlePosition');\n    if (positionElement) {\n        positionElement.innerHTML = `Index: ${index}`;\n    }\n}\n"],"names":["gui","GUI","event","guiContainer","parameters","canvas","scene","THREE.Scene","textureLoader","THREE.TextureLoader","particleTexture","createParticles","geometry","color","size","particlesMaterial","THREE.PointsMaterial","THREE.Points","mesh1","mesh2","mesh3","mesh4","objectsDistance","createMeshes","sphereGeometry","THREE.SphereGeometry","torusKnotGeometry","THREE.TorusKnotGeometry","boxGeometry","THREE.BoxGeometry","torusGeometry","THREE.TorusGeometry","updateMeshPositions","particlesCount","positions","i","particlesGeometry","THREE.BufferGeometry","THREE.BufferAttribute","bgparticlesMaterial","particles","directionalLight","THREE.DirectionalLight","sizes","camera","renderer","cameraGroup","THREE.Group","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","cursor","handleMove","x","y","clock","THREE.Clock","previousTime","tick","elapsedTime","deltaTime","parallaxX","parallaxY","gsap","raycaster","THREE.Raycaster","mouse","THREE.Vector2","handleClick","intersects","selectedParticle","showParticleIndex","index","positionElement"],"mappings":"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"}