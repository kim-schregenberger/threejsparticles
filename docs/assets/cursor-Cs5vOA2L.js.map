{"version":3,"file":"cursor-Cs5vOA2L.js","sources":["../../src/shaders/particles/vertex.glsl","../../src/shaders/particles/fragment.glsl","../../src/cursor.js"],"sourcesContent":["uniform vec2 uResolution;\nuniform sampler2D uPictureTexture;\nuniform sampler2D uDisplacementTexture;\n\nattribute float aIntensity;\nattribute float aAngle;\n\nvarying vec3 vColor;\n\nvoid main()\n{\n    // Displacement\n    vec3 newPosition = position;\n    float displacementIntensity = texture(uDisplacementTexture, uv).r;\n    displacementIntensity = smoothstep(0.1, 0.3, displacementIntensity);\n\n    vec3 displacement = vec3(\n        cos(aAngle) * 0.2,\n        sin(aAngle) * 0.2,\n        1.0\n    );\n    displacement = normalize(displacement);\n    displacement *= displacementIntensity;\n    displacement *= 3.0;\n    displacement *= aIntensity;\n    \n    newPosition += displacement;\n\n    // Final position\n    vec4 modelPosition = modelMatrix * vec4(newPosition, 1.0);\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectedPosition = projectionMatrix * viewPosition;\n    gl_Position = projectedPosition;\n\n    // Picture\n    float pictureIntensity = texture(uPictureTexture, uv).r;\n\n    // Point size\n    gl_PointSize = 0.15 * pictureIntensity * uResolution.y;\n    gl_PointSize *= (1.0 / - viewPosition.z);\n\n    // Varyings\n    vColor = vec3(pow(pictureIntensity, 2.0));\n}","varying vec3 vColor;\n\nvoid main()\n{\n    vec2 uv = gl_PointCoord;\n    float distanceToCenter = length(uv - vec2(0.5));\n\n    if(distanceToCenter > 0.5)\n        discard;\n\n    gl_FragColor = vec4(vColor, 1.0);\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n}","import * as THREE from 'three'\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js'\nimport particlesVertexShader from './shaders/particles/vertex.glsl'\nimport particlesFragmentShader from './shaders/particles/fragment.glsl'\n\n/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector('canvas.webgl.cursor')\n\n// Scene\nconst scene = new THREE.Scene()\n\n// Loaders\nconst textureLoader = new THREE.TextureLoader()\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    pixelRatio: Math.min(window.devicePixelRatio, 2)\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n    sizes.pixelRatio = Math.min(window.devicePixelRatio, 2)\n\n    // Materials\n    particlesMaterial.uniforms.uResolution.value.set(sizes.width * sizes.pixelRatio, sizes.height * sizes.pixelRatio)\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(sizes.pixelRatio)\n\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100)\ncamera.position.set(0, 0, 18)\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\ncontrols.enableZoom = false;\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    antialias: true\n})\nrenderer.setClearColor('#181818')\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(sizes.pixelRatio)\n\n/**\n * Displacement\n */\nconst displacement = {}\n\n// 2D canvas\ndisplacement.canvas = document.createElement('canvas')\ndisplacement.canvas.width = 28\ndisplacement.canvas.height = 28\ndisplacement.canvas.style.position = 'fixed'\ndisplacement.canvas.style.width = '256px'\ndisplacement.canvas.style.height = '256px'\ndisplacement.canvas.style.top = 0\ndisplacement.canvas.style.left = 0\ndisplacement.canvas.style.zIndex = 10\ndisplacement.canvas.style.display = 'none'\nconst divForCanvas = document.querySelector('.canv')\ndivForCanvas.append(displacement.canvas)\n\n// Context\ndisplacement.context = displacement.canvas.getContext('2d')\ndisplacement.context.fillRect(0, 0, displacement.canvas.width, displacement.canvas.height)\n\n// Glow image\ndisplacement.glowImage = new Image()\ndisplacement.glowImage.src = './glow.png'\n\n// Interactive plane\ndisplacement.interactivePlane = new THREE.Mesh(\n    new THREE.PlaneGeometry(10, 10),\n    new THREE.MeshBasicMaterial({ color: 'red', side: THREE.DoubleSide })\n)\ndisplacement.interactivePlane.visible = false\nscene.add(displacement.interactivePlane)\n\n// Raycaster\ndisplacement.raycaster = new THREE.Raycaster()\n\n// Coordinates\ndisplacement.screenCursor = new THREE.Vector2(9999, 9999)\ndisplacement.canvasCursor = new THREE.Vector2(9999, 9999)\ndisplacement.canvasCursorPrevious = new THREE.Vector2(9999, 9999)\n\nwindow.addEventListener('pointermove', (event) =>\n{\n    displacement.screenCursor.x = (event.clientX / sizes.width) * 2 - 1\n    displacement.screenCursor.y = - (event.clientY / sizes.height) * 2 + 1\n})\n\n// Texture\ndisplacement.texture = new THREE.CanvasTexture(displacement.canvas)\n\n/**\n * Particles\n */\nconst particlesGeometry = new THREE.PlaneGeometry(10, 10, 128, 128)\nparticlesGeometry.setIndex(null)\nparticlesGeometry.deleteAttribute('normal')\n\nconst intensitiesArray = new Float32Array(particlesGeometry.attributes.position.count)\nconst anglesArray = new Float32Array(particlesGeometry.attributes.position.count)\n\nfor(let i = 0; i < particlesGeometry.attributes.position.count; i++)\n{\n    intensitiesArray[i] = Math.random()\n    anglesArray[i] = Math.random() * Math.PI * 2\n}\n\nparticlesGeometry.setAttribute('aIntensity', new THREE.BufferAttribute(intensitiesArray, 1))\nparticlesGeometry.setAttribute('aAngle', new THREE.BufferAttribute(anglesArray, 1))\n\nconst particlesMaterial = new THREE.ShaderMaterial({\n    vertexShader: particlesVertexShader,\n    fragmentShader: particlesFragmentShader,\n    uniforms:\n    {\n        uResolution: new THREE.Uniform(new THREE.Vector2(sizes.width * sizes.pixelRatio, sizes.height * sizes.pixelRatio)),\n        uPictureTexture: new THREE.Uniform(textureLoader.load('./picture-7.png')),\n        uDisplacementTexture: new THREE.Uniform(displacement.texture)\n    },\n    blending: THREE.AdditiveBlending\n})\nconst particles = new THREE.Points(particlesGeometry, particlesMaterial)\nscene.add(particles)\n\n/**\n * Animate\n */\nconst tick = () =>\n{\n    // Update controls\n    controls.update()\n\n    /**\n     * Raycaster\n     */\n    displacement.raycaster.setFromCamera(displacement.screenCursor, camera)\n    const intersections = displacement.raycaster.intersectObject(displacement.interactivePlane)\n\n    if(intersections.length)\n    {\n        const uv = intersections[0].uv\n        \n        displacement.canvasCursor.x = uv.x * displacement.canvas.width\n        displacement.canvasCursor.y = (1 - uv.y) * displacement.canvas.height\n    }\n\n    /**\n     * Displacement\n     */\n    // Fade out\n    displacement.context.globalCompositeOperation = 'source-over'\n    displacement.context.globalAlpha = 0.02\n    displacement.context.fillRect(0, 0, displacement.canvas.width, displacement.canvas.height)\n\n    // Speed alpha\n    const cursorDistance = displacement.canvasCursorPrevious.distanceTo(displacement.canvasCursor)\n    displacement.canvasCursorPrevious.copy(displacement.canvasCursor)\n    const alpha = Math.min(cursorDistance * 0.05, 1)\n    \n    // Draw glow\n    const glowSize = displacement.canvas.width * 0.25\n    displacement.context.globalCompositeOperation = 'lighten'\n    displacement.context.globalAlpha = alpha\n    displacement.context.drawImage(\n        displacement.glowImage,\n        displacement.canvasCursor.x - glowSize * 0.5,\n        displacement.canvasCursor.y - glowSize * 0.5,\n        glowSize,\n        glowSize\n    )\n\n    // Texture\n    displacement.texture.needsUpdate = true\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["vertex_default","fragment_default","canvas","scene","THREE.Scene","textureLoader","THREE.TextureLoader","sizes","particlesMaterial","camera","renderer","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","displacement","divForCanvas","THREE.Mesh","THREE.PlaneGeometry","THREE.MeshBasicMaterial","THREE.DoubleSide","THREE.Raycaster","THREE.Vector2","event","THREE.CanvasTexture","particlesGeometry","intensitiesArray","anglesArray","i","THREE.BufferAttribute","THREE.ShaderMaterial","particlesVertexShader","particlesFragmentShader","THREE.Uniform","THREE.AdditiveBlending","particles","THREE.Points","tick","intersections","uv","cursorDistance","alpha","glowSize"],"mappings":"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"}