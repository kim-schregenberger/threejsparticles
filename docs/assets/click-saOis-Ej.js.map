{"version":3,"file":"click-saOis-Ej.js","sources":["../../src/shaders/firework/vertex.glsl","../../src/shaders/firework/fragment.glsl","../../src/click.js"],"sourcesContent":["uniform float uSize;\nuniform vec2 uResolution;\nuniform float uProgress;\n\nattribute float aSize;\nattribute float aTimeMultiplier;\n\n#include ../includes/remap.glsl\n\nvoid main()\n{\n    float progress = uProgress * aTimeMultiplier;\n    vec3 newPosition = position;\n\n    // Exploding\n    float explodingProgress = remap(progress, 0.0, 0.1, 0.0, 1.0);\n    explodingProgress = clamp(explodingProgress, 0.0, 1.0);\n    explodingProgress = 1.0 - pow(1.0 - explodingProgress, 3.0);\n    newPosition *= explodingProgress;\n\n    // Falling\n    float fallingProgress = remap(progress, 0.1, 1.0, 0.0, 1.0);\n    fallingProgress = clamp(fallingProgress, 0.0, 1.0);\n    fallingProgress = 1.0 - pow(1.0 - fallingProgress, 3.0);\n    newPosition.y -= fallingProgress * 0.2;\n\n    // Scaling\n    float sizeOpeningProgress = remap(progress, 0.0, 0.125, 0.0, 1.0);\n    float sizeClosingProgress = remap(progress, 0.125, 1.0, 1.0, 0.0);\n    float sizeProgress = min(sizeOpeningProgress, sizeClosingProgress);\n    sizeProgress = clamp(sizeProgress, 0.0, 1.0);\n\n    // Twinkling\n    float twinklingProgress = remap(progress, 0.2, 0.8, 0.0, 1.0);\n    twinklingProgress = clamp(twinklingProgress, 0.0, 1.0);\n    float sizeTwinkling = sin(progress * 30.0) * 0.5 + 0.5;\n    sizeTwinkling = 1.0 - sizeTwinkling * twinklingProgress;\n\n    // Final position\n    vec4 modelPosition = modelMatrix * vec4(newPosition, 1.0);\n    vec4 viewPosition = viewMatrix * modelPosition;\n    gl_Position = projectionMatrix * viewPosition;\n    \n    // Final size\n    gl_PointSize = uSize * uResolution.y * aSize * sizeProgress * sizeTwinkling;\n    gl_PointSize *= 1.0 / - viewPosition.z;\n    \n    if(gl_PointSize < 1.0)\n        gl_Position = vec4(9999.9);\n}","uniform sampler2D uTexture;\nuniform vec3 uColor;\n\nvoid main()\n{\n    float textureAlpha = texture(uTexture, gl_PointCoord).r;\n\n    // Final color\n    gl_FragColor = vec4(uColor, textureAlpha);\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n}","import * as THREE from 'three'\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js'\nimport GUI from 'lil-gui'\nimport gsap from 'gsap'\nimport { Sky } from 'three/addons/objects/Sky.js'\nimport fireworkVertexShader from './shaders/firework/vertex.glsl'\nimport fireworkFragmentShader from './shaders/firework/fragment.glsl'\n\n/**\n * Base\n */\n// Debug\nconst gui = new GUI({ width: 340 })\n\n// hide GUI\ngui.domElement.style.display = 'none';\n\n// Toggle GUI visibility when pressing 'h'\ndocument.addEventListener('keydown', (event) => {\n    if (event.key === 'h' || event.key === 'H') {\n        const guiContainer = gui.domElement;\n        if (guiContainer.style.display === 'none') {\n            guiContainer.style.display = 'block';\n        } else {\n            guiContainer.style.display = 'none';\n        }\n    }\n});\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n// Loaders\nconst textureLoader = new THREE.TextureLoader()\n\n/**\n * Sizes\n */\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    pixelRatio: Math.min(window.devicePixelRatio, 2)\n}\nsizes.resolution = new THREE.Vector2(sizes.width * sizes.pixelRatio, sizes.height * sizes.pixelRatio)\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n    sizes.pixelRatio = Math.min(window.devicePixelRatio, 2)\n    sizes.resolution.set(sizes.width * sizes.pixelRatio, sizes.height * sizes.pixelRatio)\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(sizes.pixelRatio)\n})\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(25, sizes.width / sizes.height, 0.1, 100)\ncamera.position.set(1.5, 0, 6)\nscene.add(camera)\n\n// Controls\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    antialias: true\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(sizes.pixelRatio)\n\n/**\n * Fireworks\n */\nconst textures = [\n    textureLoader.load('./particles/1.png'),\n    textureLoader.load('./particles/2.png'),\n    textureLoader.load('./particles/3.png'),\n    textureLoader.load('./particles/4.png'),\n    textureLoader.load('./particles/5.png'),\n    textureLoader.load('./particles/6.png'),\n    textureLoader.load('./particles/7.png'),\n    textureLoader.load('./particles/8.png'),\n]\n\nconst createFirework = (count, position, size, texture, radius, color) =>\n{\n    // Geometry\n    const positionsArray = new Float32Array(count * 3)\n    const sizesArray = new Float32Array(count)\n    const timeMultipliersArray = new Float32Array(count)\n\n    for(let i = 0; i < count; i++)\n    {\n        const i3 = i * 3\n\n        const spherical = new THREE.Spherical(\n            radius * (0.75 + Math.random() * 0.25),\n            Math.random() * Math.PI,\n            Math.random() * Math.PI * 2\n        )\n        const position = new THREE.Vector3()\n        position.setFromSpherical(spherical)\n\n        positionsArray[i3    ] = position.x\n        positionsArray[i3 + 1] = position.y\n        positionsArray[i3 + 2] = position.z\n\n        sizesArray[i] = Math.random()\n\n        timeMultipliersArray[i] = 1 + Math.random()\n    }\n\n    const geometry = new THREE.BufferGeometry()\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionsArray, 3))\n    geometry.setAttribute('aSize', new THREE.Float32BufferAttribute(sizesArray, 1))\n    geometry.setAttribute('aTimeMultiplier', new THREE.Float32BufferAttribute(timeMultipliersArray, 1))\n\n    // Material\n    texture.flipY = false\n    const material = new THREE.ShaderMaterial({\n        vertexShader: fireworkVertexShader,\n        fragmentShader: fireworkFragmentShader,\n        uniforms:\n        {\n            uSize: new THREE.Uniform(size),\n            uResolution: new THREE.Uniform(sizes.resolution),\n            uTexture: new THREE.Uniform(texture),\n            uColor: new THREE.Uniform(color),\n            uProgress: new THREE.Uniform(0)\n        },\n        transparent: true,\n        depthWrite: false,\n        blending: THREE.AdditiveBlending\n    })\n\n    // Points\n    const firework = new THREE.Points(geometry, material)\n    firework.position.copy(position)\n    scene.add(firework)\n\n    // Destroy\n    const destroy = () =>\n    {\n        scene.remove(firework)\n        geometry.dispose()\n        material.dispose()\n    }\n\n    // Animate\n    gsap.to(\n        material.uniforms.uProgress,\n        { value: 1, ease: 'linear', duration: 3, onComplete: destroy },\n    )\n}\n\nconst createRandomFirework = () =>\n{\n    const count = Math.round(400 + Math.random() * 1000)\n    const position = new THREE.Vector3(\n        (Math.random() - 0.5) * 2,\n        Math.random(),\n        (Math.random() - 0.5) * 2\n    )\n    const size = 0.1 + Math.random() * 0.1\n    const texture = textures[Math.floor(Math.random() * textures.length)]\n    const radius = 0.5 + Math.random()\n    const color = new THREE.Color()\n    color.setHSL(Math.random(), 1, 0.7)\n    createFirework(count, position, size, texture, radius, color)\n}\n\ncreateRandomFirework()\n\nwindow.addEventListener('click', createRandomFirework)\n\n// For mobile\nwindow.addEventListener('touchstart', (event) => {\n    // Prevent the default action (e.g., scrolling)\n    event.preventDefault()\n    createRandomFirework()\n})\n\n\n/**\n * Animate\n */\nconst tick = () =>\n{\n    // Update controls\n    controls.update()\n\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["vertex_default","fragment_default","gui","GUI","event","guiContainer","canvas","scene","THREE.Scene","textureLoader","THREE.TextureLoader","sizes","THREE.Vector2","camera","renderer","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","textures","createFirework","count","position","size","texture","radius","color","positionsArray","sizesArray","timeMultipliersArray","i","i3","spherical","THREE.Spherical","THREE.Vector3","geometry","THREE.BufferGeometry","THREE.Float32BufferAttribute","material","THREE.ShaderMaterial","fireworkVertexShader","fireworkFragmentShader","THREE.Uniform","THREE.AdditiveBlending","firework","THREE.Points","destroy","gsap","createRandomFirework","THREE.Color","tick"],"mappings":"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"}